stages:
  - pre-build
  - build
  - test
  - deploy
  - post-deploy

connectivity-check:
  stage: pre-build
  image: busybox
  script:
    - ping github.com -c1
    - nc -vz packages.netsec.inf.ethz.ch 22

govendor-population:
  stage: pre-build
  image: $CI_DOCKER_IMAGE
  # (kmateusz) Using artifacts instead of cache due to the lack of sticky runners and shared cache in our GitLab CI.
  # That means if by any chance next job hits on a different runner, it will not have access to the cache populated
  # here and will fail.
  artifacts:
    paths:
      - scion-apps/
    expire_in: 1 hour
  script:
    # Prepare operating system
    - date
    - echo "Acquire::By-Hash \"yes\"; " > /etc/apt/apt.conf.d/01byhash
    - apt update && apt install -y git curl govendor
    # Install golang
    - curl -fSL "https://dl.google.com/go/go$CI_GOLANG_VERSION.linux-amd64.tar.gz" | tar xzC /usr/local
    - ln -f -s /usr/local/go/bin/* /usr/bin/
    # Clone SCION apps source code
    - rm -rf scion-apps
    - git clone $CI_SCIONAPPS_REPO -b $CI_SCIONAPPS_BRANCH scion-apps
    - mkdir -p $HOME/go/src/github.com/netsec-ethz/
    - ln -s $(pwd)/scion-apps /root/go/src/github.com/netsec-ethz/
    # Override some files from upstream SCION apps
    - pushd scion-apps
    - if [ ! -z "$(ls ../patches)" ]; then ls -l ../patches; for i in ../patches/*.patch; do git apply $i --verbose; done; fi
    - popd
    # Grab SCION apps Go dependencies
    - cd $HOME/go/src/github.com/netsec-ethz/scion-apps

.build-script: &build-script
  before_script:
    # Prepare operating system
    - date
    - echo "Acquire::By-Hash \"yes\"; " > /etc/apt/apt.conf.d/01byhash
    - apt update && apt install -y git wget curl unzip gcc file python
    - curl -fSL "https://dl.google.com/go/go$CI_GOLANG_VERSION.linux-amd64.tar.gz" | tar xzC /usr/local
    - ln -f -s /usr/local/go/bin/* /usr/bin/
    # Install multiplatform toolchains and SCION Apps dependencies
    - "apt install -y \
      capnproto libpam0g-dev \
      libc6-armhf-cross libc6-dev-armhf-cross gcc-arm-linux-gnueabihf gcc-arm-linux-gnueabi gcc-7-arm-linux-gnueabi binutils-arm-linux-gnueabihf binutils-arm-linux-gnueabi \
      libc6-arm64-cross libc6-dev-arm64-cross gcc-aarch64-linux-gnu gcc-7-aarch64-linux-gnu \
      libc6-i386-cross libc6-dev-i386-cross linux-libc-dev-i386-cross"
    # Install selected release of BAZEL
    - wget https://github.com/bazelbuild/bazel/releases/download/$CI_BAZEL_VERSION/bazel-$CI_BAZEL_VERSION-installer-linux-x86_64.sh -O bazel_install_script.sh
    - bash bazel_install_script.sh
    # Create symlinks for Go
    - mkdir -p $HOME/go/src/github.com/netsec-ethz/
    - ln -s $(pwd)/scion-apps /root/go/src/github.com/netsec-ethz/
    # Prepare GO environment
    - export CGO_ENABLED=1
    - export GOOS=linux
    - export CC=$CI_CC && echo $CC
    - export GOARCH=$CI_GOARCH && echo $GOARCH
    # Create some directories
    - mkdir -p $HOME/go/src/github.com/netsec-ethz/scion-apps/$CI_APP_LOCATION/bin
    - mkdir -p $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION
    - cd $HOME/go/src/github.com/netsec-ethz/scion-apps/$CI_APP_LOCATION/bin

.post-build-script: &post-build-script
  after_script:
    # Set variables in BUILD.bazel
    - source ./RELEASE
    - sed -i "s/CI_TARGET_ARCHITECTURE/$CI_TARGET_ARCHITECTURE/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_BWTESTER/$PKG_VERSION_BWTESTER/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_CAMERAPP/$PKG_VERSION_CAMERAPP/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_HELLOWORLD/$PKG_VERSION_HELLOWORLD/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_NETCAT/$PKG_VERSION_NETCAT/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_BAT/$PKG_VERSION_BAT/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SENSORAPP/$PKG_VERSION_SENSORAPP/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SSH/$PKG_VERSION_SSH/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_WEBAPP/$PKG_VERSION_WEBAPP/g" BUILD.bazel
    # Prepare BIN directory for Bazel
    - mv bin-$CI_TARGET_ARCHITECTURE bin
    # Build APP package
    - bazel build //:scion-apps-$CI_APP_LOCATION
    # Prepare packages to shipment
    - mkdir output-$CI_TARGET_ARCHITECTURE
    - cp bazel-bin/*_$CI_TARGET_ARCHITECTURE.deb output-$CI_TARGET_ARCHITECTURE
    # Debug
    - ls -lh output-$CI_TARGET_ARCHITECTURE
    # Place hash of git repo in the output for auditing
    - cd $HOME/go/src/github.com/netsec-ethz/scion-apps && git log -1

bwtester-amd64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_GOARCH: amd64
    CI_CC: gcc
    CI_APP_LOCATION: bwtester
  <<: *build-script
  script:
    - go build ../bwtestclient/
    - mv bwtestclient $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-bwtestclient
    - go build ../bwtestserver/
    - mv bwtestserver $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-bwtestserver
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

bwtester-arm64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: arm64
    CI_GOARCH: arm64
    CI_CC: aarch64-linux-gnu-gcc
    CI_APP_LOCATION: bwtester
  <<: *build-script
  script:
    - go build ../bwtestclient/
    - mv bwtestclient $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-bwtestclient
    - go build ../bwtestserver/
    - mv bwtestserver $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-bwtestserver
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

bwtester-armhf:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: armhf
    CI_GOARCH: arm
    CI_CC: arm-linux-gnueabihf-gcc
    CI_APP_LOCATION: bwtester
  <<: *build-script
  script:
    - go build ../bwtestclient/
    - mv bwtestclient $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-bwtestclient
    - go build ../bwtestserver/
    - mv bwtestserver $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-bwtestserver
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

camerapp-amd64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_GOARCH: amd64
    CI_CC: gcc
    CI_APP_LOCATION: camerapp
  <<: *build-script
  script:
    - go build ../imagefetcher/
    - mv imagefetcher $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-imagefetcher
    - go build ../imageserver/
    - mv imageserver $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-imageserver
    - cp ../imageserver/paparazzi.py $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-paparazzi
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

camerapp-arm64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: arm64
    CI_GOARCH: arm64
    CI_CC: aarch64-linux-gnu-gcc
    CI_APP_LOCATION: camerapp
  <<: *build-script
  script:
    - go build ../imagefetcher/
    - mv imagefetcher $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-imagefetcher
    - go build ../imageserver/
    - mv imageserver $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-imageserver
    - cp ../imageserver/paparazzi.py $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-paparazzi
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

camerapp-armhf:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: armhf
    CI_GOARCH: arm
    CI_CC: arm-linux-gnueabihf-gcc
    CI_APP_LOCATION: camerapp
  <<: *build-script
  script:
    - go build ../imagefetcher/
    - mv imagefetcher $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-imagefetcher
    - go build ../imageserver/
    - mv imageserver $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-imageserver
    - cp ../imageserver/paparazzi.py $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-paparazzi
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

helloworld-amd64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_GOARCH: amd64
    CI_CC: gcc
    CI_APP_LOCATION: helloworld
  <<: *build-script
  script:
    - go build ../
    - mv helloworld $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-helloworld
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

helloworld-arm64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: arm64
    CI_GOARCH: arm64
    CI_CC: aarch64-linux-gnu-gcc
    CI_APP_LOCATION: helloworld
  <<: *build-script
  script:
    - go build ../
    - mv helloworld $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-helloworld
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

helloworld-armhf:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: armhf
    CI_GOARCH: arm
    CI_CC: arm-linux-gnueabihf-gcc
    CI_APP_LOCATION: helloworld
  <<: *build-script
  script:
    - go build ../
    - mv helloworld $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-helloworld
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

netcat-amd64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_GOARCH: amd64
    CI_CC: gcc
    CI_APP_LOCATION: netcat
  <<: *build-script
  script:
    - go build ../
    - mv netcat $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-netcat
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

netcat-arm64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: arm64
    CI_GOARCH: arm64
    CI_CC: aarch64-linux-gnu-gcc
    CI_APP_LOCATION: netcat
  <<: *build-script
  script:
    - go build ../
    - mv netcat $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-netcat
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

netcat-armhf:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: armhf
    CI_GOARCH: arm
    CI_CC: arm-linux-gnueabihf-gcc
    CI_APP_LOCATION: netcat
  <<: *build-script
  script:
    - go build ../
    - mv netcat $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-netcat
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

bat-amd64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_GOARCH: amd64
    CI_CC: gcc
    CI_APP_LOCATION: bat
  <<: *build-script
  script:
    - go build ../
    - mv bat $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-bat
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

bat-arm64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: arm64
    CI_GOARCH: arm64
    CI_CC: aarch64-linux-gnu-gcc
    CI_APP_LOCATION: bat
  <<: *build-script
  script:
    - go build ../
    - mv bat $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-bat
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

bat-armhf:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: armhf
    CI_GOARCH: arm
    CI_CC: arm-linux-gnueabihf-gcc
    CI_APP_LOCATION: bat
  <<: *build-script
  script:
    - go build ../
    - mv bat $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-bat
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

sensorapp-amd64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_GOARCH: amd64
    CI_CC: gcc
    CI_APP_LOCATION: sensorapp
  <<: *build-script
  script:
    - go build ../sensorfetcher/
    - mv sensorfetcher $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-sensorfetcher
    - go build ../sensorserver/
    - mv sensorserver $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-sensorserver
    - cp ../sensorserver/sensorreader.py $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-sensorreader
    - cp ../sensorserver/timereader.py $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-timereader
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

sensorapp-arm64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: arm64
    CI_GOARCH: arm64
    CI_CC: aarch64-linux-gnu-gcc
    CI_APP_LOCATION: sensorapp
  <<: *build-script
  script:
    - go build ../sensorfetcher/
    - mv sensorfetcher $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-sensorfetcher
    - go build ../sensorserver/
    - mv sensorserver $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-sensorserver
    - cp ../sensorserver/sensorreader.py $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-sensorreader
    - cp ../sensorserver/timereader.py $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-timereader
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

sensorapp-armhf:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: armhf
    CI_GOARCH: arm
    CI_CC: arm-linux-gnueabihf-gcc
    CI_APP_LOCATION: sensorapp
  <<: *build-script
  script:
    - go build ../sensorfetcher/
    - mv sensorfetcher $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-sensorfetcher
    - go build ../sensorserver/
    - mv sensorserver $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-sensorserver
    - cp ../sensorserver/sensorreader.py $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-sensorreader
    - cp ../sensorserver/timereader.py $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-timereader
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

ssh-amd64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_GOARCH: amd64
    CI_CC: gcc
    CI_APP_LOCATION: ssh
  <<: *build-script
  script:
    - go build ../client/
    - mv client $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-ssh-client
    - go build ../server/
    - mv server $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-ssh-server
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

#ssh-arm64:
#  stage: build
#  image: $CI_DOCKER_IMAGE
#  variables:
#    CI_TARGET_ARCHITECTURE: arm64
#    CI_GOARCH: arm64
#    CI_CC: aarch64-linux-gnu-gcc
#    CI_APP_LOCATION: ssh
#  <<: *build-script
#  script:
#    - go build ../client/
#    - mv client $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-ssh-client
#    - go build ../server/
#    - mv server $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-ssh-server
#  <<: *post-build-script
#  artifacts:
#    paths:
#      - output-$CI_TARGET_ARCHITECTURE/
#    expire_in: 1 hour

#ssh-armhf:
#  stage: build
#  image: $CI_DOCKER_IMAGE
#  variables:
#    CI_TARGET_ARCHITECTURE: armhf
#    CI_GOARCH: arm
#    CI_CC: arm-linux-gnueabihf-gcc
#    CI_APP_LOCATION: ssh
#  <<: *build-script
#  script:
#    - go build ../client/
#    - mv client $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-ssh-client
#    - go build ../server/
#    - mv server $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-ssh-server
#  <<: *post-build-script
#  artifacts:
#    paths:
#      - output-$CI_TARGET_ARCHITECTURE/
#    expire_in: 1 hour

webapp-amd64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_GOARCH: amd64
    CI_CC: gcc
    CI_APP_LOCATION: webapp
  <<: *build-script
  script:
    - go build ../
    - mv webapp $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-webapp
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

webapp-arm64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: arm64
    CI_GOARCH: arm64
    CI_CC: aarch64-linux-gnu-gcc
    CI_APP_LOCATION: webapp
  <<: *build-script
  script:
    - go build ../
    - mv webapp $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-webapp
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

webapp-armhf:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: armhf
    CI_GOARCH: arm
    CI_CC: arm-linux-gnueabihf-gcc
    CI_APP_LOCATION: webapp
  <<: *build-script
  script:
    - go build ../
    - mv webapp $CI_PROJECT_DIR/bin-$CI_TARGET_ARCHITECTURE/$CI_APP_LOCATION/scion-webapp
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

.test-deb-script: &test-deb-script
  script:
    # Debug
    - ls -l output-$CI_TARGET_ARCHITECTURE/
    # Install SCIONLab as a dependency
    - apt update && apt install -y apt-transport-https ca-certificates
    - echo "deb [trusted=yes] https://packages.netsec.inf.ethz.ch/debian all main" >> /etc/apt/sources.list && apt update
    - apt install -y scionlab curl
    # Install SCION APPS packages
    - dpkg -i output-$CI_TARGET_ARCHITECTURE/*.deb

all-ubuntu-18.04-amd64-test:
  stage: test
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
  <<: *test-deb-script

all-debian-10-amd64-test:
  stage: test
  image: debian:buster
  variables:
    CI_TARGET_ARCHITECTURE: amd64
  <<: *test-deb-script

.deb-deploy-script: &deb-deploy-script
  before_script:
    - 'which ssh-agent || ( apt update && apt-get install -qq openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$CI_SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - tmpdir=$(ssh -q $CI_SCP_TARGET "mktemp -d --suffix .debs")
    - scp -v output-$CI_DEB_PLATFORM/*.deb $CI_SCP_TARGET:$tmpdir
    - ssh -q $CI_SCP_TARGET 'set -x; for deb in '$tmpdir'/*.deb; do reprepro -b /home/reprepro/reprepro includedeb '$CI_DEB_CODENAME' $deb || true; done'
    - ssh -q $CI_SCP_TARGET "rm -r $tmpdir"

all-deb-deploy:
  stage: deploy
  image: $CI_DOCKER_IMAGE
  only:
    - master
  variables:
    CI_DEB_CODENAME: all
    CI_DEB_PLATFORM: "*"
  <<: *deb-deploy-script

#.test-deb-script: &test-deb-script
#  script:
#    - ls -l output-$CI_TARGET_ARCHITECTURE/scion-apps*$CI_TARGET_ARCHITECTURE.deb
#    # Test installation
#    - dpkg -i output-$CI_TARGET_ARCHITECTURE/scion-apps*$CI_TARGET_ARCHITECTURE.deb
#    # Test removal
#    - dpkg --purge $CI_PACKAGE
#
