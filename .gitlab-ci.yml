stages:
  - pre-build
  - build
  - test
  - deploy
  - post-deploy

connectivity-check:
  stage: pre-build
  image: busybox
  script:
    - ping github.com -c1
    - nc -vz packages.netsec.inf.ethz.ch 22
    - nc -vz packages-test.netsec.inf.ethz.ch 22

clone-repositories:
  stage: pre-build
  image: buildpack-deps:bionic-scm
  retry:
    max: 2
    when: runner_system_failure
  artifacts:
    paths:
      - scion-apps/
    expire_in: 1 hour
  script:
    # Clone SCION apps source code
    - git clone --depth=1 https://github.com/netsec-ethz/scion-apps.git -b master scion-apps
    # Place hashes of git repos in the output for auditing
    - git -C scion-apps/ log -1
    # Override some files from upstream SCION apps
    - pushd scion-apps
    - if [ ! -z "$(ls ../patches)" ]; then ls -l ../patches; for i in ../patches/*.patch; do git apply $i --verbose; done; fi
    - popd

prefetch-dependencies:
  stage: pre-build
  image: busybox
  retry:
    max: 2
    when: runner_system_failure
  artifacts:
    paths:
      - bazel_install_script.sh
      - go.linux-amd64.tar.gz
    expire_in: 1 hour
  script:
    # Prefetch selected version of bazel installer:
    - BAZEL_VERSION=0.25.3
    - wget https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh -O bazel_install_script.sh
    # Prefetch selected go version:
    - GOLANG_VERSION=1.13.4
    - wget https://dl.google.com/go/go$GOLANG_VERSION.linux-amd64.tar.gz -O go.linux-amd64.tar.gz


.build-script: &build-script
  before_script:
    # Prepare operating system
    - date
    - export DEBIAN_FRONTEND=noninteractive
    - echo "Acquire::By-Hash \"yes\"; " > /etc/apt/apt.conf.d/01byhash
    # Install multiplatform toolchains and SCION Apps dependencies
    - apt-get update
    - apt-get install -y
      capnproto libpam0g-dev
      libc6-armhf-cross libc6-dev-armhf-cross gcc-arm-linux-gnueabihf gcc-arm-linux-gnueabi gcc-7-arm-linux-gnueabi binutils-arm-linux-gnueabihf binutils-arm-linux-gnueabi
      libc6-arm64-cross libc6-dev-arm64-cross gcc-aarch64-linux-gnu gcc-7-aarch64-linux-gnu
      libc6-i386-cross libc6-dev-i386-cross linux-libc-dev-i386-cross
    # Install golang
    - tar -f go.linux-amd64.tar.gz -xzC /usr/local
    - ln -f -s /usr/local/go/bin/* /usr/bin/
    # Install selected release of BAZEL
    - bash bazel_install_script.sh

    # Prepare GO environment
    - export CGO_ENABLED=1
    - export GOOS=linux
    - export CC=$CI_CC && echo $CC
    - export GOARCH=$CI_GOARCH && echo $GOARCH
    # Create some directories
    - export BIN_DIR=$CI_PROJECT_DIR/bin/$CI_APP_LOCATION
    - mkdir -p $BIN_DIR
    - cd scion-apps

.post-build-script: &post-build-script
  after_script:
    # Set variables in BUILD.bazel
    - source ./RELEASE
    - sed -i "s/CI_TARGET_ARCHITECTURE/$CI_TARGET_ARCHITECTURE/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_BWTESTER/$PKG_VERSION_BWTESTER/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_CAMERAPP/$PKG_VERSION_CAMERAPP/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_HELLOWORLD/$PKG_VERSION_HELLOWORLD/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_NETCAT/$PKG_VERSION_NETCAT/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_BAT/$PKG_VERSION_BAT/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SENSORAPP/$PKG_VERSION_SENSORAPP/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SSH/$PKG_VERSION_SSH/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_WEBAPP/$PKG_VERSION_WEBAPP/g" BUILD.bazel
    # Build APP package
    - bazel build //:scion-apps-$CI_APP_LOCATION
    # Prepare packages to shipment
    - mkdir output-$CI_TARGET_ARCHITECTURE
    - cp bazel-bin/*_$CI_TARGET_ARCHITECTURE.deb output-$CI_TARGET_ARCHITECTURE
    # Debug
    - ls -lh output-$CI_TARGET_ARCHITECTURE

bwtester-amd64:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_GOARCH: amd64
    CI_CC: gcc
    CI_APP_LOCATION: bwtester
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-bwtestclient ./bwtester/bwtestclient/
    - go build -o $BIN_DIR/scion-bwtestserver ./bwtester/bwtestserver/
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

bwtester-arm64:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: arm64
    CI_GOARCH: arm64
    CI_CC: aarch64-linux-gnu-gcc
    CI_APP_LOCATION: bwtester
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-bwtestclient ./bwtester/bwtestclient/
    - go build -o $BIN_DIR/scion-bwtestserver ./bwtester/bwtestserver/
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

bwtester-armhf:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: armhf
    CI_GOARCH: arm
    CI_CC: arm-linux-gnueabihf-gcc
    CI_APP_LOCATION: bwtester
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-bwtestclient ./bwtester/bwtestclient/
    - go build -o $BIN_DIR/scion-bwtestserver ./bwtester/bwtestserver/
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

camerapp-amd64:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_GOARCH: amd64
    CI_CC: gcc
    CI_APP_LOCATION: camerapp
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-imagefetcher ./camerapp/imagefetcher/
    - go build -o $BIN_DIR/scion-imageserver ./camerapp/imageserver/
    - cp camerapp/imageserver/paparazzi.py $BIN_DIR/scion-paparazzi
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

camerapp-arm64:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: arm64
    CI_GOARCH: arm64
    CI_CC: aarch64-linux-gnu-gcc
    CI_APP_LOCATION: camerapp
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-imagefetcher ./camerapp/imagefetcher/
    - go build -o $BIN_DIR/scion-imageserver ./camerapp/imageserver/
    - cp camerapp/imageserver/paparazzi.py $BIN_DIR/scion-paparazzi
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

camerapp-armhf:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: armhf
    CI_GOARCH: arm
    CI_CC: arm-linux-gnueabihf-gcc
    CI_APP_LOCATION: camerapp
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-imagefetcher ./camerapp/imagefetcher/
    - go build -o $BIN_DIR/scion-imageserver ./camerapp/imageserver/
    - cp camerapp/imageserver/paparazzi.py $BIN_DIR/scion-paparazzi
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

netcat-amd64:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_GOARCH: amd64
    CI_CC: gcc
    CI_APP_LOCATION: netcat
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-netcat ./netcat/
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

netcat-arm64:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: arm64
    CI_GOARCH: arm64
    CI_CC: aarch64-linux-gnu-gcc
    CI_APP_LOCATION: netcat
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-netcat ./netcat/
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

netcat-armhf:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: armhf
    CI_GOARCH: arm
    CI_CC: arm-linux-gnueabihf-gcc
    CI_APP_LOCATION: netcat
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-netcat ./netcat/
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

bat-amd64:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_GOARCH: amd64
    CI_CC: gcc
    CI_APP_LOCATION: bat
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-netcat ./bat/
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

bat-arm64:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: arm64
    CI_GOARCH: arm64
    CI_CC: aarch64-linux-gnu-gcc
    CI_APP_LOCATION: bat
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-netcat ./bat/
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

bat-armhf:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: armhf
    CI_GOARCH: arm
    CI_CC: arm-linux-gnueabihf-gcc
    CI_APP_LOCATION: bat
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-netcat ./bat/
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

sensorapp-amd64:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_GOARCH: amd64
    CI_CC: gcc
    CI_APP_LOCATION: sensorapp
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-sensorfetcher ./sensorapp/sensorfetcher/
    - go build -o $BIN_DIR/scion-sensorserver ./sensorapp/sensorserver/
    - cp sensorapp/sensorserver/sensorreader.py $BIN_DIR/scion-sensorreader
    - cp sensorapp/sensorserver/timereader.py $BIN_DIR/scion-timereader
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

sensorapp-arm64:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: arm64
    CI_GOARCH: arm64
    CI_CC: aarch64-linux-gnu-gcc
    CI_APP_LOCATION: sensorapp
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-sensorfetcher ./sensorapp/sensorfetcher/
    - go build -o $BIN_DIR/scion-sensorserver ./sensorapp/sensorserver/
    - cp sensorapp/sensorserver/sensorreader.py $BIN_DIR/scion-sensorreader
    - cp sensorapp/sensorserver/timereader.py $BIN_DIR/scion-timereader
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

sensorapp-armhf:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: armhf
    CI_GOARCH: arm
    CI_CC: arm-linux-gnueabihf-gcc
    CI_APP_LOCATION: sensorapp
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-sensorfetcher ./sensorapp/sensorfetcher/
    - go build -o $BIN_DIR/scion-sensorserver ./sensorapp/sensorserver/
    - cp sensorapp/sensorserver/sensorreader.py $BIN_DIR/scion-sensorreader
    - cp sensorapp/sensorserver/timereader.py $BIN_DIR/scion-timereader
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

ssh-amd64:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_GOARCH: amd64
    CI_CC: gcc
    CI_APP_LOCATION: ssh
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-ssh-client ./ssh/client/
    - go build -o $BIN_DIR/scion-ssh-server ./ssh/server/
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

#ssh-arm64:
#  stage: build
#  image: buildpack-deps:bionic
#  variables:
#    CI_TARGET_ARCHITECTURE: arm64
#    CI_GOARCH: arm64
#    CI_CC: aarch64-linux-gnu-gcc
#    CI_APP_LOCATION: ssh
#  <<: *build-script
#  script:
#    - go build -o $BIN_DIR/scion-ssh-client ./ssh/client/
#    - go build -o $BIN_DIR/scion-ssh-server ./ssh/server/
#  <<: *post-build-script
#  artifacts:
#    paths:
#      - output-$CI_TARGET_ARCHITECTURE/
#    expire_in: 1 hour

#ssh-armhf:
#  stage: build
#  image: buildpack-deps:bionic
#  variables:
#    CI_TARGET_ARCHITECTURE: armhf
#    CI_GOARCH: arm
#    CI_CC: arm-linux-gnueabihf-gcc
#    CI_APP_LOCATION: ssh
#  <<: *build-script
#  script:
#    - go build -o $BIN_DIR/scion-ssh-client ./ssh/client/
#    - go build -o $BIN_DIR/scion-ssh-server ./ssh/server/
#  <<: *post-build-script
#  artifacts:
#    paths:
#      - output-$CI_TARGET_ARCHITECTURE/
#    expire_in: 1 hour

webapp-amd64:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_GOARCH: amd64
    CI_CC: gcc
    CI_APP_LOCATION: webapp
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-webapp ./webapp/
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

webapp-arm64:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: arm64
    CI_GOARCH: arm64
    CI_CC: aarch64-linux-gnu-gcc
    CI_APP_LOCATION: webapp
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-webapp ./webapp/
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

webapp-armhf:
  stage: build
  image: buildpack-deps:bionic
  variables:
    CI_TARGET_ARCHITECTURE: armhf
    CI_GOARCH: arm
    CI_CC: arm-linux-gnueabihf-gcc
    CI_APP_LOCATION: webapp
  <<: *build-script
  script:
    - go build -o $BIN_DIR/scion-webapp ./webapp/
  <<: *post-build-script
  artifacts:
    paths:
      - output-$CI_TARGET_ARCHITECTURE/
    expire_in: 1 hour

.test-deb-script: &test-deb-script
  script:
    # Debug
    - ls -l output-$CI_TARGET_ARCHITECTURE/
    # Install SCIONLab as a dependency
    - apt update && apt install -y apt-transport-https ca-certificates
    - echo "deb [trusted=yes] https://packages.netsec.inf.ethz.ch/debian all main" >> /etc/apt/sources.list && apt update
    - apt install -y scionlab curl
    # Install SCION APPS packages
    - dpkg -i output-$CI_TARGET_ARCHITECTURE/*.deb

all-ubuntu-18.04-amd64-test:
  stage: test
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
  <<: *test-deb-script

all-debian-10-amd64-test:
  stage: test
  image: debian:buster
  variables:
    CI_TARGET_ARCHITECTURE: amd64
  <<: *test-deb-script

.deb-deploy-script: &deb-deploy-script
  retry:
    max: 2
    when: runner_system_failure
  before_script:
    - printenv
    - 'which ssh-agent || ( apt update && apt-get install -qq openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$CI_SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    #
    # Copy (only) new versions of .debs to package repomachine and include them into the repository
    # We skip existing versions of .debs because reprepro will complain loudly
    # if the hashes don't match and our builds don't seem be reproducible enough.
    #
    # Note: the dance with only copying the new versions looks like a pointless optimisation;
    #       this could also be done entirely on the repo machine, but simply
    #       the shell escaping gets (even more) hairy.
    - repo_ssh_target=reprepro@$CI_PACKAGE_REPO
    - tmpdir=$(ssh -q $repo_ssh_target "mktemp -d --suffix .debs")
    - existing_debs=$(ssh -q $repo_ssh_target reprepro -b /home/reprepro/reprepro --list-format \''${$basename}\n'\' list all)
    - debs_to_deploy=$(ls output-*/*.deb | grep -vF "$existing_debs" || true)
    - debs_to_skip=$(ls output-*/*.deb | grep -F "$existing_debs" || true)
    - if [ -n "$debs_to_skip" ]; then
    -   echo "Skipping existing *.deb:"
    -   echo "$debs_to_skip"
    - fi
    - if [ -n "$debs_to_deploy" ]; then
    -   scp -v $debs_to_deploy $repo_ssh_target:$tmpdir
    -   ssh -q $repo_ssh_target 'set -x; for deb in '$tmpdir'/*.deb; do reprepro -b /home/reprepro/reprepro includedeb all $deb; done'
    -   ssh -q $repo_ssh_target 'rm -r ' $tmpdir
    - fi

all-deb-staging-deploy:
  stage: deploy
  image: buildpack-deps:bionic
  only:
    - /^staging.*$/
  except:
    - triggers
  variables:
    CI_PACKAGE_REPO: packages-test.netsec.inf.ethz.ch
  <<: *deb-deploy-script

all-deb-prod-deploy:
  stage: deploy
  image: buildpack-deps:bionic
  only:
    - master
  except:
    - triggers
  variables:
    CI_PACKAGE_REPO: packages.netsec.inf.ethz.ch
  <<: *deb-deploy-script
